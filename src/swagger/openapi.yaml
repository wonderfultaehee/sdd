openapi: 3.0.0
info:
  description: Aimmo 기업과제 게시판 기능 구현
  version: 1.0.0
  title: Aimmo 기업과제
  contact:
    email: "qkrskdjf@naver.com"
  license:
    name: Apache 2.0
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
servers:
  - url: "http://52.78.137.213:3000"
    description: 배포환경

tags:
  - name: page
    description: 페이지
  - name: post
    description: 게시글
  - name: auth
    description: 인증
  - name: comment
    description: 댓글

components:
  schemas:
    User:
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          example: "1234"
    Page:
      properties:
        list:
          type: array
          items:
            $ref: "#/components/schemas/Post"
        count:
          type: integer
    Post:
      properties:
        title:
          type: string
          example: "게시글 제목"
        text:
          type: string
          example: "게시글 내용 ~~~~"
        category:
          type: string
          example: "개발"
        userId:
          type: string
          example: "sdsdas123123"
        count:
          type: integer
          example: 1
        views:
          type: array
          example: ["231231sdasd", "dasd21323", "12312ssdaw12"]
        createAt:
          type: string
          format: date
        comment:
          type: array
          $ref: ["#/components/components/Comment"]
          example: ["comment objcet1", "comment object2"]

    Comment:
      properties:
        postId:
          type: string
        depth:
          type: integer
          format: int64
          example: 2
        parentId:
          type: integer
          format: int64
          example: "1231h13j12d1qw13"
        author:
          type: string
          example: "sasdasd221"
        text:
          type: string
          example: "너무 좋아요~"

  requestBodies:
    createPost:
      content:
        application/json:
          schema:
            properties:
              title:
                type: string
                example: "게시글 제목"
              text:
                type: string
                example: "게시글 내용 ~~~~"
              category:
                type: string
                example: "WEB"
      description: request data to create post
      required: true

    updatePost:
      content:
        application/json:
          schema:
            properties:
              title:
                type: string
              text:
                type: string
      description: request data to update post
      required: true
    createUser:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/User"
            example:
              email: "newEmail@naver.com"
              password: "1234"
      description: request data to create user
      required: true

    loginUser:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/User"
      description: request data for user login
      required: true
    createComment:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Comment"

      description: request data for create comment - parentId - 게시글의 _id(댓글) 또는 게시글 댓글의 _id기록
      required: true


paths:
  /page:
    get:
      summary: 페이지를 반환합니다.
      tags:
        - page
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            format: int64
          example: 1
          required: true
        - name: offset
          in: query
          schema:
            type: string
          example: 1
          required: true
      responses:
        "200":
          description: 페이지 요청 성공
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Page"
        "404":
          description: Page not found

  /comment/page:
    get:
      summary: 대댓글의 페이지를 반환합니다.
      tags:
        - page
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            format: int64
          example: 1
          required: true
        - name: offset
          in: query
          schema:
            type: string
          example: 1
          required: true
      responses:
        "200":
          description: 페이지 요청 성공
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Page"
        "404":
          description: Page not found

  /post/condition:
    get:
      summary: 제목과 카테고리를 기준으로 게시글을 검색합니다.
      tags:
        - post
      parameters:
        - name: title
          in: query
          schema:
            type: string
          example: 안녕하세요
        - name: category
          in: query
          schema:
            type: string
          example: WEB

  /post:
    get:
      summary: 게시글을 반환합니다.
      tags:
        - post
      parameters:
        - name: _id
          in: query
          schema:
            type: string
            example: "sdasd12312313"
          required: true
      responses:
        "200":
          description: 게시글 요청 성공
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "404":
          description: Post not found
    post:
      summary: 게시글을 작성합니다.
      tags:
        - post
      requestBody:
        $ref: "#/components/requestBodies/createPost"
      responses:
        "200":
          description: 게시글 작성 성공
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "401":
          description: jwt must be provided
        "404":
          description: UserId not found
    patch:
      summary: 게시글을 수정합니다.
      tags:
        - post
      parameters:
        - name: id
          in: query
          schema:
            type: string
          example: 1
          required: true
      requestBody:
        $ref: "#/components/requestBodies/updatePost"
      responses:
        "200":
          description: 게시글 수정 성공
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "401":
          description: jwt must be provided
        "403":
          description: You don't have edit permission
        "404":
          description: Post not found
    delete:
      summary: 게시글을 삭제합니다.
      tags:
        - post
      parameters:
        - name: id
          in: query
          schema:
            type: string
          example: 1
          required: true
      responses:
        "200":
          description: 게시글 삭제 성공
        "401":
          description: jwt must be provided
        "403":
          description: You don't have edit permission
        "404":
          description: Post not found
    /post/condition:
      get:
        summary: 게시글을 제목과 카테고리로 검색합니다.
        tags:
          - post
        parameters:
          - name: title
            in: query
            schema:
              type: string
              example: "게시글 제목"
            required: false
          - name: category
            in: query
            schema:
              type: string
              example: "개발"
            required: false
        responses:
          "200":
            description: 게시글 검색
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Post"
          "404":
            description: Post not found

  /comment:
    post:
      summary: 댓글 생성합니다.
      tags:
        - comment
      requestBody:
        $ref: "#/components/requestBodies/createComment"
      responses:
        "200":
          description: OK

  /auth/signup:
    post:
      summary: 회원가입 합니다.
      tags:
        - auth
      requestBody:
        $ref: "#/components/requestBodies/createUser"
      responses:
        "200":
          description: OK
        "404":
          description: email already exist
  /auth/login:
    post:
      summary: 로그인합니다.
      tags:
        - auth
      requestBody:
        $ref: "#/components/requestBodies/loginUser"
      responses:
        "200":
          description: login success
          content:
            application/json:
              schema:
                properties:
                  refreshToken:
                    type: string
        "404":
          description: email not found
  /auth/logout:
    get:
      summary: 로그아웃 합니다.
      tags:
        - auth
      responses:
        "200":
          description: OK
        "404":
          description: user not found
  /auth/refresh:
    get:
      summary: AccessToken 재발급
      tags:
        - auth
      responses:
        "400":
          description: Access token is not expired!
        "401":
          description: No authorized
        "403":
          description: Access token and refresh token are need for refresh!
        "404":
          description: user not found

